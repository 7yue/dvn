#!/usr/bin/env python
import re
from subprocess import Popen, PIPE
from xml.etree import ElementTree as ET

service_document = ET.fromstring(Popen("tools/scripts/data-deposit-api/test-service-document", stdout=PIPE).communicate()[0])

deposit_target = service_document[0][1].attrib["href"]

print "creating a study using", deposit_target
deposit_receipt = ET.fromstring(Popen(["tools/scripts/data-deposit-api/test-collection-entry-only", deposit_target], stdout=PIPE).communicate()[0]);

for link in deposit_receipt.findall("./{http://www.w3.org/2005/Atom}link"):
    if "edit-media" == link.attrib["rel"]:
        edit_media_uri = link.attrib["href"]
    if "edit" == link.attrib["rel"]:
        edit_uri = link.attrib["href"]

zipfile="example.zip"
print "uploading", zipfile, "to", edit_media_uri
out = Popen(["tools/scripts/data-deposit-api/test-edit-media-put-binary", zipfile, edit_media_uri], stdout=PIPE).communicate()[0]
match = re.search("HTTP/1.1 204 No Content", out)
if match:
    print "binary was successfully uploaded"
else:
    print "unable to upload binary to study, output was:"
    print out

print "listing studies..."
feed_of_studies = Popen(["tools/scripts/data-deposit-api/list-studies", deposit_target], stdout=PIPE).communicate()[0]
print feed_of_studies,

sword_error = ET.fromstring(Popen(["tools/scripts/data-deposit-api/test-error"], stdout=PIPE).communicate()[0]);
for error in sword_error:
    if "{http://www.w3.org/2005/Atom}summary" == error.tag:
        error_summary = error.text

match = re.search("could not extract global ID", error_summary)
if match:
    print "global id test succeeded"
else:
    print "error was not thrown"

print "getting statement from", edit_uri
statement = ET.fromstring(Popen(["tools/scripts/data-deposit-api/test-statement", edit_uri], stdout=PIPE).communicate()[0]);
for line in statement:
    if "{http://www.w3.org/2005/Atom}title" == line.tag:
        print "title of study created:", line.text
